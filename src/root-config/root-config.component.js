import React, { useContext } from "react";
import PageHeader from "../shared/page-header.component";
import { useCss } from "kremling";
import { LocalStorageContext } from "../shared/use-local-storage-data.hook";
import Code from "../shared/code.component";

export default function HtmlFile(props) {
  const scope = useCss(css);
  const [copying, setCopying] = React.useState(false);
  React.useEffect(() => {
    if (copying) {
      const timeoutId = setTimeout(() => {
        setCopying(false);
      }, 500);

      return () => clearTimeout(timeoutId);
    }
  }, [copying]);
  const { application } = useContext(LocalStorageContext);
  const appUrls = window.importMapOverrides.getOverrideMap().imports;
  if (!application)
    return <p>You need to register at least one application!</p>;
  const code = `
<script type="systemjs-importmap">
  {
    "imports": {
      "react": "https://cdn.jsdelivr.net/npm/react@16.13.0/umd/react.production.min.js",
      "react-dom": "https://cdn.jsdelivr.net/npm/react-dom@16.13.0/umd/react-dom.production.min.js",
      "single-spa": "https://cdn.jsdelivr.net/npm/single-spa@5.1.1/lib/system/single-spa.min.js",
      "${application.name}": "${appUrls[application.name]}"
    }
  }
</script>`;

  const registerAppCode = `
singleSpa.registerApplication(
  '${application.name}',
  () => System.import('${application.name}'),
  location => location.pathname.startsWith('${application.pathPrefix}')
);

singleSpa.start();
  `;
  return (
    <>
      <PageHeader title="The HTML file" />
      <article className="card" {...scope}>
        <section>
          It's time to talk about the root-config. In single-spa, there is only
          one html file for your applications. We call it the "single-spa root
          config." This is different than normal -- you don't get one HTML file
          per application, just one for all of them. Only having one html file
          is actually the origin of the single-spa name (only a "single"
          single-page-application -- don't think about it too hard{" "}
          <span role="img" aria-label="Smiley emoji">
            ðŸ˜€
          </span>
          )
        </section>
        <section>
          The single-spa root config is something that we can provide for you
          entirely. Let's use the create-single-spa again!
        </section>
        <h3>Your single-spa root config</h3>
        <div>
          You'll want to create an{" "}
          <span className="whole-new-git-repo">entirely new git repo</span> for
          your single-spa root config, separated from your applications.
        </div>
        <div>
          <Code code={`npx create-single-spa --module-type root-config`} />
        </div>
        <p>
          This command won't give you a running root-config out of the box for
          our playground demonstration! But, fear not, you will understand
          everything root-config related now!
        </p>
        <p>
          First, lets talk about the import-map. "ADD HERE LINKS TO VIDEO ABOUT
          IMPORTMAP"
        </p>
        <p>
          <b>TL;DR;</b> an import-map is how Systemjs know where are your
          applications! But not only your applications, but also the
          dependencies for your applications!
        </p>
        <p>
          If you've been following this guide, and created a single-spa react
          application using our CLI (create-single-spa), how about checking the{" "}
          <a
            href={
              window.importMapOverrides.getOverrideMap().imports[
                application.name
              ]
            }
            target="_blank"
          >
            JS generated by webpack now?
          </a>{" "}
          What is important for now, is this line:
        </p>
        <Code code={`System.register(["react","react-dom"], function(...`} />
        <p>
          This is how Systemjs manages dependencies for Systemjs modules. So,
          before running your single-spa react application, systemjs need to
          know what to do with "react" and "react-dom"! Just add them to your
          root-config import-maps and you are ready to go! Also, don't forget to
          add your own configuration!
        </p>
        <Code code={code} />
        <div className="copy-row">
          <button
            type="button"
            className="primary"
            onClick={() => {
              setCopying(true);
              copy(code);
            }}
            disabled={copying}
          >
            Copy import-map
          </button>
        </div>
        <p>
          But how does my application runs in the playground? Well, for your
          convenience, we already added "react" and "react-dom" in our
          import-map! Just inspect the DOM and see for yourself!
        </p>

        <p>Now we need to start the root-config. Run:</p>
        <Code code={`yarn start --https`} />
        <p>
          Remember! Https is optional, but only if you consuming from non-https
          served assets! So you can drop the <b>--https</b>, but you need to
          also drop it from your single-spa application too.
        </p>
        <p>
          But wait... Why am I only seeing a blank page? Well, did you
          registered you single-spa application? You can add them to your
          import-map, but if you never register them in single-spa{" "}
          <a href="https://single-spa.js.org/docs/api.html#registerapplication">
            registerApplication
          </a>
          , it will never bootstrap your applications! Just add this code in you
          root-config entrypoint file.
        </p>
        <Code code={registerAppCode} />
      </article>
    </>
  );
}

function copy(str) {
  const el = document.createElement("textarea");
  el.value = str;
  el.setAttribute("readonly", "");
  el.style.position = "absolute";
  el.style.left = "-9999px";
  document.body.appendChild(el);
  el.select();
  document.execCommand("copy");
  document.body.removeChild(el);
}

const css = `
& .copy-row {
  display: flex;
  justify-content: flex-end;
  margin: .8rem 0;
}
`;
